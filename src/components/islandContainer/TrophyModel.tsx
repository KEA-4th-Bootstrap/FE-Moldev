/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 scene.gltf 
Author: Arun Kumar S (https://sketchfab.com/arun-kumar)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/trophy-clash-royale-57ec3bc84cc74f5a85da07b99f4c770a
Title: Trophy (Clash Royale)
*/

import { useCallback } from 'react';
import { useGLTF } from '@react-three/drei';
import { Group, Mesh } from 'three';
import gsap from 'gsap';
import { useNavigate } from 'react-router';

const useGettingRef = () => {
  const ref = useCallback((node: Group) => {
    if (node !== null) {
      gsap.to(node.position, {
        x: 2,
        y: 0.5,
        z: 13,
        duration: 10,
        repeat: -1,
        yoyo: true,
        ease: 'power1.inOut',
      });
      gsap.fromTo(
        node.rotation,
        {
          x: Math.PI / 2,
          y: 0,
          z: 0,
        },
        {
          x: -Math.PI * 2,
          y: Math.PI * 1,
          z: Math.PI * 2,
          duration: 30,
          repeat: -1,
          ease: 'power1.inOut',
          yoyo: true,
        },
      );
    }
  }, []);

  return [ref];
};

export function TrophyModel(
  props: JSX.IntrinsicElements['group'] & { setHover: (hover: boolean) => void; isHover: boolean },
) {
  const navigation = useNavigate();
  const [group] = useGettingRef();
  const { nodes, materials } = useGLTF('/models/trophy/scene.gltf');
  return (
    <group
      ref={group as any}
      {...props}
      dispose={null}
      position={[0, 0, 10]}
      onPointerEnter={() => props.setHover(true)}
      onPointerOut={() => props.setHover(false)}
      scale={props.isHover ? 1.25 : 1}
      onClick={() => navigation('/list/awards')}
    >
      <mesh
        geometry={(nodes.Object_2 as Mesh).geometry}
        material={materials.Trophy_Gold}
        rotation={[-Math.PI / 2, 0, 0]}
      />
    </group>
  );
}

useGLTF.preload('/models/trophy/scene.gltf');
